/**
* It makes all the calls to the webservices. Either by using get or post.
*
* @class DataAdapter
* @constructor
* @event onSuccess
*/
function DataAdapter( args) {
	/**
	 * By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false.
	 *
	 * @property async
	 * @type String
	 * @default "true"
	 */
	this.async = true;
	/**
	 * ISPyB instance that points to the restful webservices (i.e. http://ispyvalid.esrf.fr:8080/ispyb/ispyb-ws/rest)
	 *
	 * @property url
	 * @type String
	 * @default null
	 */
	this.url = null;
	/**
	 * Token that will authenticate the restfull calls on the server.
	 *
	 * @property token
	 * @type String
	 * @default null
	 */
	this.token = null;
	this.proposal = null;
	this.username = null;
	
	/**
	 * Fired when the get or post are succeed
	 *
	 * @event onSuccess
	 * @param {Object} the object which will fire the event
	 */
	this.onSuccess = new Event(this);
	/**
	 * Fired when the get or post produces an error
	 *
	 * @event onError
	 * @param {Object} the object which will fire the event
	 */
	this.onError = new Event(this);

	if (args != null) {
		if (args.username != null) {
			this.username = args.username;
		}
		if (args.async != null) {
			this.async = args.async;
		}
		if (args.onSuccess != null) {
			this.onSuccess.attach(args.onSuccess);
		}
		if (args.onError != null) {
			this.onError.attach(args.onError);
		}
		if (args.url != null) {
			this.url = args.url;
		}
		if (args.token != null) {
			this.token = args.token;
		}
		if (args.proposal != null) {
			this.proposal = args.proposal;
		}
	}
	
}

/**
* This method manage the creation of correct the URL. It receices as URL the relative path to the resource and will add the URL to the ISPyB server instance as well as will replace the token, proposal and username automatically.
* @method getUrl
* @param {String} url Relative path to the resource to be access. For instance: "/{token}/proposal/{proposal}/saxs/buffer/list"
* @return {String} Returns the effetive URL to access to an ISPyB instance: http://ispyvalid.esrf.fr:8080/ispyb/ispyb-ws/rest/d337d511ecac7sd301407347d66965cb27cbfa6a/proposal/mx415/saxs/buffer/list
*/
DataAdapter.prototype.getUrl = function(url){
	return this.url + url.replace("{token}", this.token).replace("{proposal}", this.proposal).replace("{username}", this.username);
};

/**
* This method makes a ajax call of type GET

* @method get
* @param {String} url Relative path to the resource to be access. For instance: "/{token}/proposal/{proposal}/saxs/buffer/list"
*/
DataAdapter.prototype.get = function(url){
	var _this = this;
		$.ajax({
			  url: this.getUrl( url),
			  type: 'get',
			  async : this.async,
			  statusCode: {
                  
                   401 : function(){  
		            	_this.onError.notify('401 Unauthorized');
		            },
		            404 : function(){
                        
		            	_this.onError.notify('404 : not found');
		            },
		            415 : function(){
                        
		                _this.onError.notify('415 : type not allowed');
		            },
		            500 : function(){
		                _this.onError.notify('500 : internal server error');
		            }
		        },
			  success: function(data){ 
                  
				  _this.onSuccess.notify(data);
			  },
			  error: function(error, message){
                  
				  _this.onError.notify(error);
			  }
			});
};

/**
* This method makes a ajax call of type POST

* @method post
* @param {String} url Relative path to the resource to be access. For instance: "/{token}/proposal/{proposal}/saxs/buffer/list"
* @param {String} data It is a string with the data to be sent within the POST call
*/
DataAdapter.prototype.post = function(url, data){
	var _this = this;
	
	 url = this.getUrl(url);
	 $.ajax({
		  type: "POST",
		  async : this.async,
           statusCode: {
                   401 : function(){     
                                        
		            	_this.onError.notify('401 Unauthorized');
		            },
		            404 : function(){
                        
		            	_this.onError.notify('404 : not found');
		            },
		            415 : function(){
                        
		                _this.onError.notify('415 : type not allowed');
		            },
		            500 : function(){
                        
		                _this.onError.notify('500 : internal server error');
		            }
		        },
		  url: url,
		  data: data,
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			 
		  },
		  error: function(error){
              
			  _this.onError.notify(error);
			 
		  }
	});
	 
};



/**
* This allows to replace a subset of characters on a string
*/
String.prototype.format = function (args) {
    var str = this;
    return str.replace(String.prototype.format.regex, function(item) {
        var intVal = parseInt(item.substring(1, item.length - 1));
        var replace;
        if (intVal >= 0) {
            replace = args[intVal];
        } else if (intVal === -1) {
            replace = "{";
        } else if (intVal === -2) {
            replace = "}";
        } else {
            replace = "";
        }
        return replace;
    });
};
String.prototype.format.regex = new RegExp("{-?[0-9]+}", "g");



/**
* This class is in charge of the Event management. An object can create an event and other objects can subscribe to such event by using the function attach.
* @class Event
* @constructor
*/
function Event(sender) {
	this._sender = sender;
	this._listeners = [];
}

Event.prototype = {
	/**
	* It attaches a function to an event. This function will be executed once the event is fired
	* @method attach
	* @param {String} listener It is a callback function
	*/
	attach : function(listener) {
		this._listeners.push(listener);
	},
	/**
	* It is called when the event is produced and will executed all the functions attached to such event
	* @method notify
	* @param {Object} args It is an object that the sender will send when the event is notified
	*/
	notify : function(args) {
		for (var i = 0; i < this._listeners.length; i++) {
			this._listeners[i](this._sender, args);
		}
	}

};

function ExiDataAdapter(args){
	this.async = true;
	this.onSuccess = new Event(this);
	this.onError = new Event(this);
	
	if (args != null) {
		if (args.async != null) {
			this.async = args.async;
		}
		if (args.onSuccess != null) {
			this.onSuccess.attach(args.onSuccess);
		}
		if (args.onError != null) {
			this.onError.attach(args.onError);
		}
	}

}

ExiDataAdapter.prototype.getUrl = function(url){
	var connection = EXI.credentialManager.getConnections()[0];
	return connection.exiUrl + url.replace("{token}", connection.token).replace("{username}", connection.username);
};


ExiDataAdapter.prototype.call = function(url){
	var _this = this;
//	var connections = EXI.credentialManager.getConnections();

	$.ajax({
		  url: this.getUrl(url),
		  type: 'get',
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			  if (exiSAXS != null){
				  exiSAXS.setLoading(false);
			  }
		  },
		  error: function(error){
			  _this.onError.notify(error);
			  if (exiSAXS != null){
				  exiSAXS.setError(error);
			  }
		  }
	});

};

ExiDataAdapter.prototype.postcall = function(url, data){
	var _this = this;
	var connections = EXI.credentialManager.getConnections();
	
	$.ajax({
		  url: connections[0].exiUrl + url,
		  type: 'post',
		  data : data,
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			  if (exiSAXS != null){
				  exiSAXS.setLoading(false);
			  }
		  },
		  error: function(error){
			  _this.onError.notify(error);
			  if (exiSAXS != null){
				  exiSAXS.setError(error);
			  }
		  }
	});

};

ExiDataAdapter.prototype.getToolUrl = function(){
	return this.getUrl('/{token}/tool');
};

ExiDataAdapter.prototype.authenticate = function(){
	this.call('/{token}/user/{username}/authenticate');
};

ExiDataAdapter.prototype.getProject = function(){
	this.call('/{token}/project/list');
};

ExiDataAdapter.prototype.getRuns = function(projectId){
	this.call('/{token}/project/{0}/run/list'.format([ projectId]));
};

ExiDataAdapter.prototype.save = function(user){
	this.postcall('/{token}/user/save'.format([ tokens[0].token]), {user : JSON.stringify(user)});
};

ExiDataAdapter.prototype.getFileContent = function(fileId){
	this.call('/file/{0}/content'.format([ fileId]));
};

ExiDataAdapter.prototype.getFileImage = function(fileId){
	return this.getUrl('/file/{0}/image'.format([ fileId]));
};


function ExiDataAdapterGroup(args){
	this.offline = new ExiDataAdapter(args);
}



/**
* API for AutoProcIntegration
*
* @class AutoProcIntegrationDataAdapter
* @constructor
*/
function AutoProcIntegrationDataAdapter(args){
	DataAdapter.call(this, args);
}

AutoProcIntegrationDataAdapter.prototype.get = DataAdapter.prototype.get;
AutoProcIntegrationDataAdapter.prototype.post = DataAdapter.prototype.post;
AutoProcIntegrationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

/**
* It retrieves the autoprocessing view from ISPyB
* @method getViewByDataCollectionId
* @param {String} dataCollectionId It may be a comma-separated list of data collection ids
*/
AutoProcIntegrationDataAdapter.prototype.getViewByDataCollectionId= function(dataCollectionId){
	this.get('/{token}/proposal/{proposal}/mx/autoprocintegration/datacollection/{0}/view'.format( [dataCollectionId]));
};

/**
* It retrieves the URL of autoprocessing view from ISPyB
* @method getViewByDataCollectionId
* @param {String} dataCollectionId It may be a comma-separated list of data collection ids
*/
AutoProcIntegrationDataAdapter.prototype.getViewByDataCollectionURL= function(dataCollectionId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/datacollection/{0}/view'.format( [dataCollectionId]));
};


/**
* @method getByDataCollectionId
*/
AutoProcIntegrationDataAdapter.prototype.getByDataCollectionId= function(dataCollectionId){
	this.get('/{token}/proposal/{proposal}/mx/autoprocintegration/datacollection/{0}/list'.format( [dataCollectionId]));
};

/**
* It gets the URL for getting the completeness of XScale by a list autoprocintegration Id
* @method getXScaleCompleteness
*/
AutoProcIntegrationDataAdapter.prototype.getXScaleCompleteness= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/completeness'.format( [autoProcIntegrationIdList.toString()]));
};

/**
* It gets the URL for getting the RFactor of XScale by a list autoprocintegration Id
* @method getXScaleRfactor
*/
AutoProcIntegrationDataAdapter.prototype.getXScaleRfactor= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/rfactor'.format( [autoProcIntegrationIdList.toString()]));
};

/**
* It gets the URL for getting the ISigma of XScale by a list autoprocintegration Id
* @method getXScaleISigma
*/
AutoProcIntegrationDataAdapter.prototype.getXScaleISigma= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/isigma'.format( [autoProcIntegrationIdList.toString()]));
};

/**
* It gets the URL for getting the CC2 of XScale by a list autoprocintegration Id
* @method getXScaleCC2
*/
AutoProcIntegrationDataAdapter.prototype.getXScaleCC2= function(autoProcIntegrationIdList){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/cc2'.format( [autoProcIntegrationIdList.toString()]));
};

/**
* It gets the URL for getting the SigmaAnp of XScale by a list autoprocintegration Id
* @method getXScaleSigmaAno
*/
AutoProcIntegrationDataAdapter.prototype.getXScaleSigmaAno= function(autoProcIntegrationIdList){
	return this.getUrl( '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/sigmaano'.format( [autoProcIntegrationIdList.toString()]));
};

/**
* It gets the URL for getting the Wilson of XScale by a list autoprocintegration Id
* @method getXScaleWilson
*/
AutoProcIntegrationDataAdapter.prototype.getXScaleWilson= function(autoProcIntegrationIdList){
	return this.getUrl( '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/wilson'.format( [autoProcIntegrationIdList.toString()]));
};

/**
* It gets the URL for getting the AnnoCorrection of XScale by a list autoprocintegration Id
* @method getXScaleAnnoCorrection
*/
AutoProcIntegrationDataAdapter.prototype.getXScaleAnnoCorrection= function(autoProcIntegrationIdList){
	return this.getUrl( '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/anomcorr'.format( [autoProcIntegrationIdList.toString()]));
};

/**
* It gets the URL for downloading an attachement from an autoProcAttachmentId
* @method getDownloadAttachmentUrl
*/
AutoProcIntegrationDataAdapter.prototype.getDownloadAttachmentUrl= function(autoProcAttachmentId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/autoprocattachmentid/{0}/download'.format( [autoProcAttachmentId.toString()]));
};

/**
* It gets the list of attachments linked to a list of autoProcPrograms id
* @method getDownloadAttachmentUrl
*/
AutoProcIntegrationDataAdapter.prototype.getAttachmentListByautoProcProgramsIdList = function(autoProcProgramId){
	return this.get('/{token}/proposal/{proposal}/mx/autoprocintegration/attachment/autoprocprogramid/{0}/list'.format( [autoProcProgramId.toString()]));
};

/**
* It download a zipwith the list of attachments linked to a list of autoProcPrograms id
* @method downloadAttachmentListByautoProcProgramsIdList
*/
AutoProcIntegrationDataAdapter.prototype.downloadAttachmentListByautoProcProgramsIdList = function(autoProcProgramId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/attachment/autoprocprogramid/{0}/download'.format( [autoProcProgramId.toString()]));
};


/**
* It gets the URL of the list of attachments linked to a list of autoProcPrograms id
* @method getDownloadAttachmentUrl
*/
AutoProcIntegrationDataAdapter.prototype.getAttachmentListByautoProcProgramsIdListURL = function(autoProcProgramId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/autoprocintegration/attachment/autoprocprogramid/{0}/list'.format( [autoProcProgramId.toString()]));
};


/**
* It gets the phasing data by autoProccesingListId
* @method getPhasingByAutoproccesingIds
*/
AutoProcIntegrationDataAdapter.prototype.getPhasingByAutoproccesingIds = function(autoProcListId){
	 this.get('/{token}/proposal/{proposal}/mx/autoprocintegration/autoprocintegrationid/{0}/phasing'.format( [autoProcListId.toString()]));
};


/**
*
* @class CrystalDataAdapter
* @constructor
*/
function CrystalDataAdapter(args){
	DataAdapter.call(this, args);
}

CrystalDataAdapter.prototype.get = DataAdapter.prototype.get;
CrystalDataAdapter.prototype.post = DataAdapter.prototype.post;
CrystalDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

/**
* @method getCrystalsByProposalId
*/
CrystalDataAdapter.prototype.getCrystalsByProposalId= function(){
	 this.get('/{token}/proposal/{proposal}/mx/crystal/list');
};

/**
* @method getCrystalById
*/
CrystalDataAdapter.prototype.getCrystalById= function(crystalId){
	 this.get('/{token}/proposal/{proposal}/mx/crystal/{0}/get'.format( [crystalId.toString()]));
};

/**
* @method getGeometryclassBySpacegroup
* then it is possible to retrieve all cell dimensions from the geometry class
*/
CrystalDataAdapter.prototype.getGeometryclassBySpacegroup= function(spacegroup){
	 this.get('/{token}/proposal/{proposal}/mx/crystal/geometryclass/{0}/list'.format( [spacegroup]));
};



/**
* @method save
* @param {proteinId} proteinId is mandatory
* @param {crystalId} crystalId should be '' when it is a new crystal ID
* Creates a new crystal form or updates an existing one
*/
CrystalDataAdapter.prototype.save= function(
                                                proteinId,
                                                crystalId,
                                                name,
                                                spaceGroup,
                                                cellA,
                                                cellB,
                                                cellC,
                                                cellAlpha,
                                                cellBeta,
                                                cellGamma,
                                                comments)
{
    var url = ('/{token}/proposal/{proposal}/mx/crystal/proteinid/{0}/save'.format( [proteinId]));
	this.post(url, {
						proteinId:proteinId,
                        crystalId:crystalId,
                        name:name,
                        spaceGroup:spaceGroup,
                        cellA:cellA,
                        cellB:cellB,
                        cellC:cellC,
                        cellAlpha:cellAlpha,
                        cellBeta:cellBeta,
                        cellGamma:cellGamma,
                        comments:comments
	});
};








/**
* @class DataCollectionDataAdapter
* @constructor
*/
function DataCollectionDataAdapter(args){
	DataAdapter.call(this, args);
}

DataCollectionDataAdapter.prototype.get = DataAdapter.prototype.get;
DataCollectionDataAdapter.prototype.post = DataAdapter.prototype.post;
DataCollectionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


/**
* @method getBySessionsId
*/
DataCollectionDataAdapter.prototype.getBySessionsId= function(sessionsId){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/session/{0}/list'.format( [sessionsId.toString()]));
};

/**
* @method getByDataCollectionId
*/
DataCollectionDataAdapter.prototype.getByDataCollectionId= function(dataColletionIds){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/{0}/list'.format( [dataColletionIds.toString()]));
};

/**
* @method getByAcronymList
*/
DataCollectionDataAdapter.prototype.getByAcronymList= function(acronymList){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/protein_acronym/{0}/list'.format( [acronymList.toString()]));
};

/**
* @method getDataCollectionViewBySessionId
*/
DataCollectionDataAdapter.prototype.getDataCollectionViewBySessionId= function(sessionId){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/session/{0}/list'.format( [sessionId.toString()]));
};

/**
* @method getThumbNailById
*/
DataCollectionDataAdapter.prototype.getThumbNailById= function(imageId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/image/{0}/thumbnail'.format([ imageId]));
};

/**
* @method getImageById
*/
DataCollectionDataAdapter.prototype.getImageById= function(imageId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/image/{0}/get'.format([ imageId]));
};

/**
* @method getWilsonPlot
*/
DataCollectionDataAdapter.prototype.getWilsonPlot= function(dataCollectionId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/datacollection/{0}/wilson'.format([ dataCollectionId]));
};

/**
* @method getWilsonPlot
*/
DataCollectionDataAdapter.prototype.getQualityIndicatorPlot= function(dataCollectionId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/datacollection/{0}/qualityindicatorplot'.format([ dataCollectionId]));
};


/**
* @method getCrystalSnapshotByDataCollectionId
*/
DataCollectionDataAdapter.prototype.getCrystalSnapshotByDataCollectionId= function(dataCollectionId, id){
	return this.getUrl('/{token}/proposal/{proposal}/mx/datacollection/{0}/crystalsnaphot/{1}/get'.format([ dataCollectionId, id]));
};


/**
* @method getDataCollectionByDataCollectionGroupId 
*/
DataCollectionDataAdapter.prototype.getDataCollectionsByDataCollectionGroupId = function(datacollectiongroupid){	
    this.get('/{token}/proposal/{proposal}/mx/datacollection/datacollectiongroupid/{0}/list'.format([ datacollectiongroupid.toString()]));
};

/**
* This method updates the comments for a dataCollection
* @method saveComments
*/
DataCollectionDataAdapter.prototype.saveComments = function(dataCollectionId,comments){
    var url = ('/{token}/proposal/{proposal}/mx/datacollection/{0}/comments/save'.format([dataCollectionId]));
	this.post(url, {
		comments : comments
	});
};






/**
* @class DataCollectionGroupDataAdapter
* @constructor
*/
function DataCollectionGroupDataAdapter(args){
	DataAdapter.call(this, args);
}

DataCollectionGroupDataAdapter.prototype.get = DataAdapter.prototype.get;
DataCollectionGroupDataAdapter.prototype.post = DataAdapter.prototype.post;
DataCollectionGroupDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

/**
* This method updates the comments for a dataCollection
* @method saveComments
*/
DataCollectionGroupDataAdapter.prototype.saveComments = function(dataCollectionGroupId,comments){
    var url = ('/{token}/proposal/{proposal}/mx/datacollectiongroup/{0}/comments/save'.format([dataCollectionGroupId]));
	this.post(url, {
		comments : comments
	});
};
/**
* API for EnergyScanDataAdapter
*
* @class EnergyScanDataAdapter
* @constructor
*/
function EnergyScanDataAdapter(args){
	DataAdapter.call(this, args);
}

EnergyScanDataAdapter.prototype.get = DataAdapter.prototype.get;
EnergyScanDataAdapter.prototype.post = DataAdapter.prototype.post;
EnergyScanDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

/**
* @method get the energy scan by sessionId and proposalId
*/
EnergyScanDataAdapter.prototype.getEnergyScanListBySessionId = function(sessionId){
	 this.get('/{token}/proposal/{proposal}/mx/energyscan/session/{0}/list'.format([sessionId]));
};

/**
* @method get the URL to retrieve the Jpef produced by Chooch
*/
EnergyScanDataAdapter.prototype.getChoochJpegByEnergyScanId = function(energyScanId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/energyscan/energyscanId/{0}/jpegchooch'.format( [energyScanId.toString()]));
};

/**
* @method get the URL to retrieve the raw data produced by Chooch
*/
EnergyScanDataAdapter.prototype.getChoochFileByEnergyScanId = function(energyScanId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/energyscan/energyscanId/{0}/chooch'.format( [energyScanId.toString()]));
};

/**
* @method get the URL to retrieve the scan file. It is empty currently!!
*/
EnergyScanDataAdapter.prototype.getScanFileByEnergyScanId = function(energyScanId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/energyscan/energyscanId/{0}/scanfile'.format( [energyScanId.toString()]));
};








/**
* This class groups the necessary data adapter for MX experiments all together
* It contains: proposalDataAdapter, mxDataAdapterGroup, saxsDataAdapterGroup and exiDataAdapterGroup
*
* @class MxDataAdapterFactory
* @constructor
*/
function MxDataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
	this.mx = new MxDataAdapterGroup(args);
	this.saxs = new SaxsDataAdapterGroup(args);
	this.exi = new ExiDataAdapterGroup(args);
}















































/**
* This class groups the necessary data adapter for MX as technique
* It contains: AutoProcIntegrationDataAdapter, DataCollectionDataAdapter, CrystalDataAdapter, ProteinDataAdapter, WorkflowStepDataAdapter, and PhasingDataAdapter
*
* @class MxDataAdapterFactory
* @constructor
*/

function MxDataAdapterGroup(args){
	this.autoproc = new AutoProcIntegrationDataAdapter(args);
	this.dataCollection = new DataCollectionDataAdapter(args);
	this.crystal = new CrystalDataAdapter(args);
	this.protein = new ProteinDataAdapter(args);
	this.workflowstep = new WorkflowStepDataAdapter(args);
	this.sample = new SampleDataAdapter(args);
	this.phasing = new PhasingDataAdapter(args);
    this.energyscan = new EnergyScanDataAdapter(args);
    this.xfescan = new XFEScanDataAdapter(args);
    this.stats = new StatisticsDataAdapter(args);
	this.dataCollectionGroup = new DataCollectionGroupDataAdapter(args);
}



/**
* Interface implementing the API for phasing
*
* @class PhasingDataAdapter
* @constructor
*/
function PhasingDataAdapter(args){
	DataAdapter.call(this, args);
}

PhasingDataAdapter.prototype.get = DataAdapter.prototype.get;
PhasingDataAdapter.prototype.post = DataAdapter.prototype.post;
PhasingDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


/**
* It retrieves the phasing png image of the model building displaying the PDB
* @method getPhasingFilesByPhasingProgramAttachmentIdAsImage
* @param {phasingAttachmentId} aphasingAttachmentId
*/
PhasingDataAdapter.prototype.getPhasingFilesByPhasingProgramAttachmentIdAsImage = function(phasingAttachmentId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/phasing/phasingprogramattachmentid/{0}/image'.format( [phasingAttachmentId]));                                                    
};



/**
* It retrieves the phasing view
* @method getPhasingViewByAutoProcIntegrationId
* @param {String} autoprocIntegrationId It may be a comma-separated list of autoprocIntegrationId
*/
PhasingDataAdapter.prototype.getPhasingViewByAutoProcIntegrationId = function(autoprocIntegrationId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/autoprocintegrationid/{0}/list'.format( [autoprocIntegrationId]));
};

/**
* It retrieves the phasing view
* @method getPhasingViewByDataCollectionId
* @param {String} dataCollectionId It may be a comma-separated list of data collections
*/
PhasingDataAdapter.prototype.getPhasingViewByDataCollectionId = function(dataCollectionId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/datacollectionid/{0}/list'.format( [dataCollectionId]));
};

/**
* It retrieves the phasing view
* @method getPhasingViewByDataCollectionId
* @param {String} dataCollectionGroupId It may be a comma-separated list of data dataCollection Group
*/
PhasingDataAdapter.prototype.getPhasingViewByDataCollectionGroupId = function(dataCollectionGroupId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/datacollectiongroupid/{0}/list'.format( [dataCollectionGroupId]));
};


/**
* It retrieves the phasing view
* @method getPhasingViewBySampleId
* @param {String} sampleId It may be a comma-separated list of sample ids
*/
PhasingDataAdapter.prototype.getPhasingViewBySampleId = function(sampleId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/sampleid/{0}/list'.format( [sampleId]));
};

/**
* It retrieves the phasing view
* @method getPhasingViewByProteinId
* @param {String} proteinId It may be a comma-separated list of protein ids
*/
PhasingDataAdapter.prototype.getPhasingViewByProteinId = function(proteinId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/proteinid/{0}/list'.format( [proteinId]));
};

/**
* It retrieves the phasing view
* @method getPhasingViewBySessionId
* @param {String} sessionId It may be a comma-separated list of session ids
*/
PhasingDataAdapter.prototype.getPhasingViewBySessionId = function(sessionId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/sessionid/{0}/list'.format( [sessionId]));
};

/**
* It retrieves the phasing view
* @method getPhasingViewByPhasingStepId
* @param {String} phasingStepId It may be a comma-separated list of session ids
*/
PhasingDataAdapter.prototype.getPhasingViewByPhasingStepId = function(phasingStepId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/phasingstepid/{0}/list'.format( [phasingStepId]));
};

/**
* It retrieves the phasing view
* @method getPhasingViewByPhasingStepId
* @param {String} phasingStepId It may be a comma-separated list of session ids
*/
PhasingDataAdapter.prototype.getDownloadFilesByPhasingStepIdURL = function(phasingStepId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/phasing/phasingstepid/{0}/download'.format( [phasingStepId]));
};

/**
* It retrieves the phasing files by phasing step
* @method getPhasingFilesByPhasingStepId
* @param {String} phasingStepId It may be a comma-separated list of session ids
*/
PhasingDataAdapter.prototype.getPhasingFilesByPhasingStepId = function(phasingStepId){
	this.get('/{token}/proposal/{proposal}/mx/phasing/phasingstepid/{0}/files'.format( [phasingStepId]));
};

/**
* It downloads a phasing file by phasing step attachment id
* @method getPhasingFilesByPhasingStepId
* @param {String} phasingStepId It may be a comma-separated list of session ids
*/
PhasingDataAdapter.prototype.downloadPhasingFilesByPhasingAttachmentId = function(phasingAttachmentId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/phasing/phasingprogramattachmentid/{0}/download'.format( [phasingAttachmentId]));
};

/**
* It downloads a csv file by phasing step attachment id
* @method getPhasingFilesByPhasingStepId
* @param {String} phasingStepId It may be a comma-separated list of session ids
*/
PhasingDataAdapter.prototype.getCSVPhasingFilesByPhasingAttachmentIdURL = function(phasingAttachmentId){
	return this.getUrl('/{token}/proposal/{proposal}/mx/phasing/phasingprogramattachmentid/{0}/csv'.format( [phasingAttachmentId]));
};
/**
* API for protein
*
* @class ProteinDataAdapter
* @constructor
*/
function ProteinDataAdapter(args){
	DataAdapter.call(this, args);
}

ProteinDataAdapter.prototype.get = DataAdapter.prototype.get;
ProteinDataAdapter.prototype.post = DataAdapter.prototype.post;
ProteinDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

/**
* @method getProteinByProposalId
*/
ProteinDataAdapter.prototype.getProteinByProposalId= function(){
	 this.get('/{token}/proposal/{proposal}/mx/protein/list');
};










/**
* DataAdDapter read/write information about sample
*
* @class SampleDataAdapter
* @constructor
*/
function SampleDataAdapter(args){
	DataAdapter.call(this, args);
}

SampleDataAdapter.prototype.get = DataAdapter.prototype.get;
SampleDataAdapter.prototype.post = DataAdapter.prototype.post;
SampleDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

/**
* This method retrieves all the samples by crystal id

* @method getSamplesByCrystalId
*/
SampleDataAdapter.prototype.getSamplesByCrystalId = function(crystalId){
	 this.get('/{token}/proposal/{proposal}/mx/sample/crystalId/{0}/list'.format( [crystalId.toString()]));
};

SampleDataAdapter.prototype.getSampleInfoByCrystalId = function(crystalId){
	 this.get('/{token}/proposal/{proposal}/mx/sampleinfo/crystalId/{0}/list'.format( [crystalId.toString()]));
};

SampleDataAdapter.prototype.getSampleInfoByProposalId = function(){
	 this.get('/{token}/proposal/{proposal}/mx/sample/list');
};

SampleDataAdapter.prototype.getSamplesByDewarId = function(dewarId){
	 this.get('/{token}/proposal/{proposal}/mx/sample/dewarid/{0}/list'.format( [dewarId]));
};

SampleDataAdapter.prototype.getSamplesByContainerId = function(containerid){
	 this.get('/{token}/proposal/{proposal}/mx/sample/containerid/{0}/list'.format( [containerid]));
};

SampleDataAdapter.prototype.getSamplesBySessionId = function(sessionid){
	 this.get('/{token}/proposal/{proposal}/mx/sample/sessionid/{0}/list'.format( [sessionid]));
};

SampleDataAdapter.prototype.getSamplesByShipmentId = function(shipmentid){
	 this.get('/{token}/proposal/{proposal}/mx/sample/shipmentid/{0}/list'.format( [shipmentid]));
};









/**
* Interface implementing the API for phasing
*
* @class StatisticsDataAdapter
* @constructor
*/
function StatisticsDataAdapter(args){
	DataAdapter.call(this, args);
}

StatisticsDataAdapter.prototype.get = DataAdapter.prototype.get;
StatisticsDataAdapter.prototype.post = DataAdapter.prototype.post;
StatisticsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


/**
* It retrieves the statistics url between the given dates
* @method getPhasingFilesByPhasingProgramAttachmentIdAsImage
* @param {String} type
* @param {String} startDate
* @param {String} endDate
*/
StatisticsDataAdapter.prototype.getStatisticsByDate = function(type,startDate,endDate){
	return this.getUrl('/{token}/stats/autoprocstatistics/{0}/{1}/{2}/csv'.format( [type,startDate,endDate]));                                                    
};

/**
* It retrieves the statistics url between the given dates for the given beamline
* @method getPhasingFilesByPhasingProgramAttachmentIdAsImage
* @param {String} type
* @param {String} startDate
* @param {String} endDate
* @param {String} beamline
*/
StatisticsDataAdapter.prototype.getStatisticsByDateAndBeamline = function(type,startDate,endDate,beamline){
	return this.getUrl('/{token}/stats/autoprocstatistics/{0}/{1}/{2}/csv?beamlinenames={3}'.format( [type,startDate,endDate,beamline]));                                                    
};
/**
* Interface implementing the API for workflows
*
* @class WorkflowStepDataAdapter
* @constructor
*/
function WorkflowStepDataAdapter(args){
	DataAdapter.call(this, args);
}

WorkflowStepDataAdapter.prototype.get = DataAdapter.prototype.get;
WorkflowStepDataAdapter.prototype.post = DataAdapter.prototype.post;
WorkflowStepDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


/**
* @method getImageByWorkflowStepId
*/
WorkflowStepDataAdapter.prototype.getImageByWorkflowStepId = function(workflowStepId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/workflow/step/{0}/image'.format( [workflowStepId.toString()]));
};

/**
* @method getHtmlByWorkflowStepId
*/
WorkflowStepDataAdapter.prototype.getHtmlByWorkflowStepId = function(workflowStepId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/workflow/step/{0}/html'.format( [workflowStepId.toString()]));
};
/**
* @method getResultByWorkflowStepId
*/
WorkflowStepDataAdapter.prototype.getResultByWorkflowStepId = function(workflowStepId){
	 this.get('/{token}/proposal/{proposal}/mx/workflow/step/{0}/result'.format( [workflowStepId.toString()]));
};
/**
* @method getWorkflowstepByIdList
*/
WorkflowStepDataAdapter.prototype.getWorkflowstepByIdList = function(workflowStepIds){
	 this.get('/{token}/proposal/{proposal}/mx/workflow/step/{0}/list'.format( [workflowStepIds.toString()]));
};











/**
* API for XFEScanDataAdapter
*
* @class XFEScanDataAdapter
* @constructor
*/
function XFEScanDataAdapter(args){
	DataAdapter.call(this, args);
}

XFEScanDataAdapter.prototype.get = DataAdapter.prototype.get;
XFEScanDataAdapter.prototype.post = DataAdapter.prototype.post;
XFEScanDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

/**
* @method get the xrf scan by sessionId and proposalId
*/
XFEScanDataAdapter.prototype.getXFEScanListBySessionId = function(sessionId){
	 this.get('/{token}/proposal/{proposal}/mx/xrfscan/session/{0}/list'.format([sessionId]));
};

/**
* @method get the URL to retrieve the Jpeg dynamacally
*/
XFEScanDataAdapter.prototype.getXFEJpegByScanId = function(xfeScanId){
	 return this.getImage(xfeScanId, 'jpegScanFileFullPath');
};

XFEScanDataAdapter.prototype.getImage = function(xfeScanId, imageType){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/xrfscan/xrfscanId/{0}/image/{1}/get'.format( [xfeScanId.toString(), imageType.toString()]));
};


XFEScanDataAdapter.prototype.getScanFileScanId = function(xfeScanId){
	 return this.getFile(xfeScanId, 'scanFileFullPath');
};

/**
* @method get the URL to a file by imageType here imageType is the name of the column
*/
XFEScanDataAdapter.prototype.getFile = function(xfeScanId, imageType){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/xrfscan/xrfscanId/{0}/file/{1}}/get'.format( [xfeScanId.toString(), imageType.toString()]));
};

/**
* @method get the URL to the csv File
*/
XFEScanDataAdapter.prototype.getCSV = function(xfeScanId){
	 return this.getUrl('/{token}/proposal/{proposal}/mx/xrfscan/xrfscanId/{0}/csv'.format( [xfeScanId.toString()]));
};

function DataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
}

function DewarDataAdapter(args){
	DataAdapter.call(this, args);
}

DewarDataAdapter.prototype.get = DataAdapter.prototype.get;
DewarDataAdapter.prototype.post = DataAdapter.prototype.post;
DewarDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DewarDataAdapter.prototype.saveDewar= function(shippingId, dewar){
	this.post( ('/{token}/proposal/{proposal}/shipping/{0}/dewar/save'.format( [shippingId])), dewar);
};

DewarDataAdapter.prototype.removeDewar= function(shippingId, dewarId){
	this.get(('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/remove'.format( [shippingId, dewarId])));
};

DewarDataAdapter.prototype.addDewar= function(shippingId){
   this.saveDewar(shippingId, {});
};

DewarDataAdapter.prototype.getDewarsByProposal = function(){
	this.get('/{token}/proposal/{proposal}/dewar/list');
};

DewarDataAdapter.prototype.getDewarsByStatus = function(status){
	this.get(('/{token}/proposal/{proposal}/dewar/status/{0}/list'.format( [status])));
};

DewarDataAdapter.prototype.getDewarsBySessionId = function(sessionId){
	this.get('/{token}/proposal/{proposal}/dewar/session/{0}/list'.format( [sessionId]));
};

DewarDataAdapter.prototype.updateSampleLocation = function(containerIdList, beamlineList, sampleLocation){
    var url = '/{token}/proposal/{proposal}/container/{0}/beamline/{1}/samplechangerlocation/update'.format( [containerIdList,beamlineList]);
    this.post(url, {sampleChangerLocation : sampleLocation.join()});
};

DewarDataAdapter.prototype.emptySampleLocation = function(containerIdList){
    var url = '/{token}/proposal/{proposal}/container/{0}/samplechangerlocation/empty'.format([containerIdList]);
    this.post(url);
};

/**
* This method export a pdf list of the sample in the given dewars
* @method exportPDF
* @param dewarIdList
* @param sortView [1: sort by acronym/sample name, 2: sort by dewar/container/location]
*/
DewarDataAdapter.prototype.exportPDF = function(dewarIdList,sortView) {
	return this.getUrl('/{token}/proposal/{proposal}/mx/sample/dewar/{0}/sortView/{1}/list/pdf'.format( [dewarIdList,sortView]));
};





/**
* DataADapter read/write information about lab contacts
*
* @class LabcontactDataAdapter
* @constructor
*/
function LabcontactDataAdapter(args){
	DataAdapter.call(this, args);
}

LabcontactDataAdapter.prototype.get = DataAdapter.prototype.get;
LabcontactDataAdapter.prototype.post = DataAdapter.prototype.post;
LabcontactDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;



/**
* This method retrieves all the labcontacts linked to a proposal

* @method getLabContacts
*/
LabcontactDataAdapter.prototype.getLabContacts = function(){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/list');
};
/**
* This method retrieves all scientists linked to a proposal from the SMIS database
* @method getLabContacts
*/
LabcontactDataAdapter.prototype.getScientists = function(){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/smis/list');
};
/**
* This method retrieves a labcontact based on its labContactId
* @method getLabContactById
*/
LabcontactDataAdapter.prototype.getLabContactById = function(labContactId){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/{0}/get'.format([labContactId]));
};
/**
* This method updates the information of a labcontact
* @method saveLabContact
*/
LabcontactDataAdapter.prototype.saveLabContact = function(labcontact){
    var url = ('/{token}/proposal/{proposal}/shipping/labcontact/save');
	this.post(url, {
		labcontact : JSON.stringify(labcontact)
	});
};


function ProposalDataAdapter(args){
	DataAdapter.call(this, args);
}

ProposalDataAdapter.prototype.get = DataAdapter.prototype.get;
ProposalDataAdapter.prototype.post = DataAdapter.prototype.post;
ProposalDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ProposalDataAdapter.prototype.getProposals= function(){
	this.get('/{token}/proposal/list');
};

ProposalDataAdapter.prototype.getDewarByProposalId= function(){
	this.get('/{token}/proposal/{proposal}/shipping/dewar/list');
};

ProposalDataAdapter.prototype.getProposalsInfo= function(){
	this.get('/{token}/proposal/{proposal}/technique/saxs/get');
};

ProposalDataAdapter.prototype.getProposalBySessionId= function(sessionId){
	this.get('/{token}/proposal/session/{0}/list'.format([sessionId]));
};

ProposalDataAdapter.prototype.update= function(){
	if (EXI != null){
		if (EXI.proposalManager != null){
			this.onSuccess.attach(function(sender, proposals){
				localStorage.setItem("proposals", JSON.stringify(proposals));
			});
			/** This makes that this attach will be executed in first position **/
			this.onSuccess._listeners.reverse();
		}
	}
	this.getProposalsInfo();
};


function ProposalDataAdapterGroup(args){
	this.authentication = new AuthenticationDataAdapter(args);
	this.dewar = new DewarDataAdapter(args);
	this.proposal = new ProposalDataAdapter(args);
	this.shipping = new ShippingDataAdapter(args);
	this.session = new SessionDataAdapter(args);
	this.labcontacts = new LabcontactDataAdapter(args);
}
function SessionDataAdapter(args){
	DataAdapter.call(this, args);
}

SessionDataAdapter.prototype.get = DataAdapter.prototype.get;
SessionDataAdapter.prototype.post = DataAdapter.prototype.post;
SessionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SessionDataAdapter.prototype.getSessions = function(){
	this.get('/{token}/proposal/{proposal}/session/list');
};

SessionDataAdapter.prototype.getSessionsByProposal = function(proposal){ 
	this.get('/{token}/proposal/{0}/session/list'.format([proposal]));
};
 
SessionDataAdapter.prototype.getSessionByProposalSessionId = function(proposal, sessionId){
	this.get('/{token}/proposal/{0}/session/sessionId/{1}/list'.format([proposal, sessionId]));
};

SessionDataAdapter.prototype.getSessionsByDate = function(startDate, endDate){
	this.get('/{token}/proposal/session/date/{0}/{1}/list'.format([startDate, endDate]));
};

SessionDataAdapter.prototype.getSessionsByDateAndBeamline = function(startDate, endDate, beamline){
	this.get('/{token}/proposal/session/date/{0}/{1}/list?beamline={2}'.format([startDate, endDate, beamline]));
};

SessionDataAdapter.prototype.getSessionsByProposalAndDate = function(startDate, endDate, proposal){
	this.get('/{token}/proposal/{0}/session/date/{1}/{2}/list'.format([proposal, startDate, endDate]));
};

SessionDataAdapter.prototype.getSessionsByBeamlineOperator = function(beamlineOperator){
	this.get('/{token}/proposal/session/beamlineoperator/{0}/list'.format([beamlineOperator]));
};

SessionDataAdapter.prototype.downloadPDFReport = function(proposal,sessionId,reportType) {
	return this.getUrl('/{token}/proposal/{0}/mx/datacollection/session/{1}/report/{2}/pdf'.format( [proposal,sessionId,reportType]));
};

SessionDataAdapter.prototype.downloadDOCReport = function(proposal,sessionId,reportType) {
	return this.getUrl('/{token}/proposal/{0}/mx/datacollection/session/{1}/report/{2}/rtf'.format( [proposal,sessionId,reportType]));
};
function ShippingDataAdapter(args){
	DataAdapter.call(this, args);
}

ShippingDataAdapter.prototype.get = DataAdapter.prototype.get;
ShippingDataAdapter.prototype.post = DataAdapter.prototype.post;
ShippingDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ShippingDataAdapter.prototype.getShippings = function(){
	this.get('/{token}/proposal/{proposal}/shipping/list');
};

ShippingDataAdapter.prototype.getShipment = function(shippingId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/get'.format([shippingId]));
};

ShippingDataAdapter.prototype.getDewarsByShipmentId = function(shippingId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/list'.format([shippingId]));
};

ShippingDataAdapter.prototype.getLabContacts = function(){
	alert("This method has been moved to labcontactDataAdapter");
};

ShippingDataAdapter.prototype.getScientists = function(){
	alert("This method has been moved to labcontactDataAdapter");
};

ShippingDataAdapter.prototype.getLabContactById = function(labContactId){
	alert("This method has been moved to labcontactDataAdapter");
};

ShippingDataAdapter.prototype.saveLabContact = function(labcontact){
   	alert("This method has been moved to labcontactDataAdapter");
};

ShippingDataAdapter.prototype.saveShipment = function(shipment ){
	this.post('/{token}/proposal/{proposal}/shipping/save', shipment);
};

ShippingDataAdapter.prototype.addPuck = function(shippingId, dewarId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/add'.format([shippingId, dewarId]));
};

ShippingDataAdapter.prototype.addContainer = function(shippingId, dewarId, containerType, capacity){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/containerType/{2}/capacity/{3}/container/add'.format([shippingId, dewarId, containerType, capacity]));
};

ShippingDataAdapter.prototype.updateStatus = function(shippingId, status){	
    this.get('/{token}/proposal/{proposal}/shipping/{0}/status/{1}/update'.format([shippingId, status]));   
};


ShippingDataAdapter.prototype.getContainerById = function(shippingId, dewarId, containerId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/get'.format([shippingId, dewarId, containerId]));
};

ShippingDataAdapter.prototype.removeContainerById = function(shippingId, dewarId, containerId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/remove'.format([shippingId, dewarId, containerId]));
};

ShippingDataAdapter.prototype.saveContainer = function(shippingId, dewarId, containerId, puck){
    var url = ('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/save'.format([shippingId, dewarId, containerId]));
	this.post(url, {
		puck : JSON.stringify(puck)
	});
};


ShippingDataAdapter.prototype.getDewarLabelURL = function(shippingId, dewarId){
	return this.getUrl('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/labels'.format([ shippingId, dewarId]));
};

/**
* It retrieves the tracking history of the dewars for a given shipment
* @method getPhasingFilesByPhasingProgramAttachmentIdAsImage
* @param {Integer} shippingId
*/
ShippingDataAdapter.prototype.getDewarTrackingHistory = function(shippingId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/history'.format([shippingId]));
};
function BufferSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

BufferSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
BufferSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
BufferSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

BufferSaxsDataAdapter.prototype.getBuffers= function(){
	this.get('/{token}/proposal/{proposal}/saxs/buffer/list');
};

BufferSaxsDataAdapter.prototype.saveBuffer= function(buffer){
    var url = ('/{token}/proposal/{proposal}/saxs/buffer/save');
	this.post(url, {buffer : JSON.stringify(buffer)});
};
function DataCollectionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

DataCollectionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
DataCollectionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
DataCollectionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByMacromoleculeAcronym= function(macromoleculeAcronym){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/macromoleculeAcronym/{0}/list'.format( [ macromoleculeAcronym]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByKey= function(key, value){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/{0}/{1}/list'.format( [ key, value.toString()]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByDataCollectionId= function(dataCollectionIds){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/dataCollectionId/{0}/bean'.format( [ dataCollectionIds]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByIdList= function(dataCollectionIds){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/{0}/list'.format( [ dataCollectionIds]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByExperimentId= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/experimentId/{0}/list'.format( [ experimentId]));
};

/** To be replaced by getDataCollectionsByExperimentId */
DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByExperiment= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/experiment/{0}/list'.format( [ experimentId]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsBySessionId= function(sessionId){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/session/{0}/list'.format( [ sessionId]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByMacromoleculeId= function(macromoleculeId){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/macromolecule/{0}/list'.format( [ macromoleculeId]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsById= function(dataCollectionIds){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/{0}/list'.format( [ dataCollectionIds.toString()]));
};
/**
 * 
 * This class represents an data Acquisition
 * 
 * @json a json with the serialization of Experiment3VO
 * 
 */
function Experiment(json) {
	this.json = json;
	this.onSaved = new Event(this);
	this.onError = new Event(this);

	this.name = json.name;
	this.experimentId = json.experimentId;
	this.creationDate = json.creationDate;

	/** For all specimens asynchronous **/
	this.onPlateSaved = new Event(this);

	this.bufferColors =  $.extend({}, EXI.proposalManager.getBufferColors());
	
	this.specimenBuffersColors = this.getSpecimenColors();
	
	for ( var bufferId in this.bufferColors) {
		this.bufferColors[bufferId] = 'black';
	}
	this.setMacromoleculesColors();
}

Experiment.prototype.getSpecimenColorByBufferId = function(specimenId) {
	return this.specimenBuffersColors[specimenId];
};

Experiment.prototype.setMacromoleculesColors = function (){
	var colors = [
					"#66c2a5",
					"#fc8d62",
					"#8da0cb",
					"#e78ac3",
					"#a6d854",
					"#ffd92f",
					"#e5c494"];
	
	
	this.macromoleculeColors = {};
	var macromolecules = this.getMacromolecules();
	for (var i = 0; i < macromolecules.length; i++) {
		this.macromoleculeColors[macromolecules[i].macromoleculeId] = colors[i%colors.length];
	}
};

Experiment.prototype.getHPLCMacromolecule = function() {
	var dcs = this.getDataCollections();
	if (dcs.length >  0){
		for ( var i = 0; i < 1; i++) {
			var meToDc = dcs[i].measurementtodatacollection3VOs;
			if (meToDc != null){
				for ( var j = 0; j < meToDc.length; j++) {
					if (meToDc[j].dataCollectionOrder == 2){
						return this.getSampleById(this.getMeasurementById(meToDc[j].measurementId).specimenId).macromolecule3VO;
					}
				}
			}
		}
	}
};

/**
 * If ((specimen1.specimenId <> specimen2.specimenId)&&(specimen1.bufferId == specimen2.bufferId)) then specimen1.color < specimen2.color
 */
Experiment.prototype.getSpecimenColors = function() {
	var specimens = this.getSamples();
	var bufferSamples = [];

	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].macromolecule3VO === null) {
			bufferSamples.push(specimens[i]);
		}
	}

	var colors = {};
	var buffercolors =  EXI.proposalManager.getBufferColors();
	for ( i = 0; i < bufferSamples.length; i++) {
		colors[bufferSamples[i].specimenId] = buffercolors[i % buffercolors.length];
	}
	return colors;
};

Experiment.prototype.getBuffers = function() {
	var samples = this.getSamples();
	var bufferHash = {};
	var buffers = [];
	if (samples !== null) {
		for ( var i = 0; i < samples.length; i++) {
			if (bufferHash[samples[i].bufferId] === null) {
				buffers.push(BIOSAXS.proposal.getBufferById(samples[i].bufferId));
				bufferHash[samples[i].bufferId] = true;
			}
		}
	}
	return buffers;
};

/** BUFFER **/
Experiment.prototype.getBufferById = function(bufferId) {
	return  EXI.proposalManager.getBufferById(bufferId);
};

/** STOCK SOLUTION **/
Experiment.prototype.getStockSolutions = function() {
	return this.json.stockSolution3VOs;
};

Experiment.prototype.getStockSolutionById = function(stockSolutionId) {
	var stockSolutions = this.getStockSolutions();
	for ( var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].stockSolutionId == stockSolutionId) {
			return stockSolutions[i];
		}
	}
};

/** This method gets all the macromolecules of the Experiment **/
Experiment.prototype.getMacromolecules = function() {
	var specimens = this.getSamples();
	var macromoleculeIds = {};
	
	var macromolecules = [];
	for (var i = 0; i < specimens.length; i++) {
		if (specimens[i].macromolecule3VO != null){
			if (macromoleculeIds[specimens[i].macromolecule3VO.macromoleculeId] == null){
				macromolecules.push(specimens[i].macromolecule3VO);
				macromoleculeIds[specimens[i].macromolecule3VO.macromoleculeId] = true;
			}
		}
	}
	return macromolecules;
};

/** Return an array with all the specimens collected, it means, where run3VO is not null **/
Experiment.prototype.getMeasurementsWithSubtractionAssociated = function() {
	var specimens = this.getMeasurements();
	var specimenCollected = [];
	for ( var i = 0; i < specimens.length; i++) {
		var specimen = specimens[i];
		if (specimen.run3VO !== null) {
			specimenCollected.push(specimen);
		}
	}
	return specimenCollected;
};

Experiment.prototype.getSamples = function() {
	return this.json.samples3VOs;
};

/** Deprecated changed to getSpecimenById **/
Experiment.prototype.getSampleById = function(specimenId) {
	return this.getSpecimenById(specimenId);
};

Experiment.prototype.getSpecimenById = function(specimenId) {
	var samples = this.getSamples();
	for ( var i = 0; i < samples.length; i++) {
		if (samples[i].specimenId == specimenId) {
			return samples[i];
		}
	}
	return null;
};

Experiment.prototype.getSpecimenByDataCollectionId = function(dataCollectionId) {
	var dataCollection = this.getDataCollectionById(dataCollectionId);
	var measurementHash = {};
	var results = [];
	for ( var j = 0; j < dataCollection.measurementtodatacollection3VOs.length; j++) {
		var measurement = this.getMeasurementById(dataCollection.measurementtodatacollection3VOs[j].measurementId);
		if (measurementHash[measurement.specimenId] == null) {
			results.push(measurement);
			measurementHash[measurement.specimenId] = true;
		}
	}
	return results;
};

Experiment.prototype.setSpecimenById = function(specimen) {
	for ( var i = 0; i < this.json.samples3VOs.length; i++) {
		if (this.json.samples3VOs[i].specimenId == specimen.specimenId) {
			this.json.samples3VOs[i] = specimen;
			return;
		}
	}
	console.log("Specimen with id: " + specimen.specimenId + " not found");
};

Experiment.prototype.setMeasurement = function(measurement) {
	var measurements = this.getMeasurements();
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].measurementId == measurement.measurementId) {
			measurements[i] = measurement;
			return;
		}
	}
};

Experiment.prototype.getConcentrations = function() {
	var concentrations = {};
	var specimens = this.getMeasurements();
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].concentration != null) {
			concentrations[specimens[i].concentration] = [ specimens[i].concentration ];
		}
	}
	var concValues = [];
	for ( var conc in concentrations) {
		if (conc != "null") {
			concValues.push(conc);
		}

	}
	return concValues;
};

Experiment.prototype.getConcentrationsBysample = function(sample) {
	var concentrations = {};
	var samples = this.getSamples();
	for ( var i = 0; i < samples.length; i++) {
		if (samples[i].macromolecule3VO != null) {
			if (samples[i].macromolecule3VO.macromoleculeId == sample.macromolecule3VO.macromoleculeId) {
				if (samples[i].concentration != null) {
					concentrations[samples[i].concentration] = [ samples[i].concentration ];
				}
			}
		}
	}
	var concValues = [];
	for ( var conc in concentrations) {
		if (conc != "null") {
			concValues.push(conc);
		}

	}
	return concValues;
};

Experiment.prototype.setSpecimen = function(specimen) {
	var buffers = this.getBuffers();
	for ( var i = 0; i < buffers.length; i++) {
		var buffer = buffers[i];
		for ( var j = 0; j < buffer.specimen3VOs.length; j++) {
			var specimen3vo = buffer.specimen3VOs[j];
			if (specimen3vo.specimenId == specimen.specimenId) {
				buffer.specimen3VOs[j] = specimen;
				return buffer;
			}
		}
	}
};

/** SAMPLE PLATES **/
Experiment.prototype.getSamplePlates = function() {
	return this.json.samplePlate3VOs;
};

Experiment.prototype.getSamplePlateById = function(samplePlateId) {
	var plates = this.getSamplePlates();
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].samplePlateId == samplePlateId) {
			return plates[i];
		}
	}
};

Experiment.prototype.getSamplePlateBySlotPositionColumn = function(slotPositionColumn) {
	var plates = this.getSamplePlates();
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].slotPositionColumn == slotPositionColumn) {
			return plates[i];
		}
	}
};

Experiment.prototype.getSpecimenByPosition = function(samplePlateId, rowNumber, columnNumber) {
	return this.getSampleByPosition();
};

Experiment.prototype.getSpecimensBySamplePlateId = function(samplePlateId) {
	var specimens = this.getSamples();
	var result = [];
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].sampleplateposition3VO != null) {
			if (specimens[i].sampleplateposition3VO.samplePlateId == samplePlateId) {
				result.push(specimens[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getSampleByPosition = function(samplePlateId, rowNumber, columnNumber) {
	var specimens = this.getSamples();
	var result = [];
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].sampleplateposition3VO != null) {
			if ((specimens[i].sampleplateposition3VO.samplePlateId == samplePlateId) && (specimens[i].sampleplateposition3VO.rowNumber == rowNumber) && (specimens[i].sampleplateposition3VO.columnNumber == columnNumber)) {
				result.push(specimens[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getPlateGroups = function() {
	var plates = this.getSamplePlates();
	var plateGroups = [];
	var keys = {};
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].plategroup3VO != null) {
			var id = plates[i].plategroup3VO.plateGroupId;
			if (keys[id] == null) {
				plateGroups.push(plates[i].plategroup3VO);
				keys[id] = true;
			}
		}
	}
	return plateGroups;
};

Experiment.prototype.getPlatesByPlateGroupId = function(plateGroupId) {
	var plates = this.getSamplePlates();
	var result = [];
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].plategroup3VO != null) {
			if (plates[i].plategroup3VO.plateGroupId == plateGroupId) {
				result.push(plates[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getMeasurements = function() {
	var speciments = [];
	var samples = this.getSamples();
	if (samples == null) {
		return [];
	}
	for ( var i = 0; i < samples.length; i++) {
		var sample = samples[i];
		for ( var j = 0; j < sample.measurements.length; j++) {
			speciments.push(sample.measurements[j]);
		}
	}
	return speciments;
};

Experiment.prototype.getMeasurementById = function(measurementId) {
	var specimens = this.getMeasurements();
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].measurementId == measurementId) {
			return specimens[i];
		}
	}
	return null;
};

Experiment.prototype.getMeasurementByDataCollectionId = function(dataCollectionId) {
	var result = [];
	var dataCollection = this.getDataCollectionById(dataCollectionId);
	for ( var i = 0; i < dataCollection.measurementtodatacollection3VOs.length; i++) {
		result.push(this.getMeasurementById(dataCollection.measurementtodatacollection3VOs[i].measurementId));
	}
	return result;
};

/** Data Collection **/

Experiment.prototype.getDataCollections = function() {
	var dc = this.json.dataCollections;
	var dataCollections = [];
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].measurementtodatacollection3VOs.length != 0) {
			dataCollections.push(dc[i]);
		}
	}
	return dataCollections;
};

Experiment.prototype.getDataCollectionsBySpecimenId = function(specimenId) {
	var measurements = this.getMeasurementsBySpecimenId(specimenId);
	var result = [];
	var resultHash = {};
	for ( var i = 0; i < measurements.length; i++) {
		var measurement = measurements[i];
		var dcs = this.getDataCollectionByMeasurementId(measurement.measurementId);
		for ( var j = 0; j < dcs.length; j++) {
			if (resultHash[dcs[j].dataCollectionId] == null) {
				resultHash[dcs[j].dataCollectionId] = true;
				result.push(dcs[j]);
			}
		}
	}
	return result;
};

Experiment.prototype.getMeasurementsBySpecimenId = function(specimenId) {
	var measurements = this.getMeasurements();
	var result = [];
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].specimenId == specimenId) {
			result.push(measurements[i]);
		}
	}
	return result;
};

Experiment.prototype.getDataCollectionByMeasurementId = function(measurementId) {
	var dc = this.getDataCollections();
	var result = [];
	
	function localSort(a, b) {
		return a.dataCollectionOrder - b.dataCollectionOrder;
	}
	
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].measurementtodatacollection3VOs.length != 0) {
			for ( var j = 0; j < dc[i].measurementtodatacollection3VOs.length; j++) {
				var measurement = dc[i].measurementtodatacollection3VOs[j];
				if (measurement.measurementId == measurementId) {
					/** Sorting by dataCollectionOrder **/
					dc[i].measurementtodatacollection3VOs.sort(localSort);
					result.push(dc[i]);
				}
			}
		}
	}
	return result;
};

Experiment.prototype.getSubtractionById = function(subtractionId) {
	var dc = this.getDataCollections();
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].substraction3VOs != null) {
			if (dc[i].substraction3VOs.length > 0) {
				for ( var j = 0; j < dc[i].substraction3VOs.length; j++) {
					if (dc[i].substraction3VOs[j].subtractionId == subtractionId) {
						return dc[i].substraction3VOs[j];
					}
				}
			}
		}
	}
	return null;
};

Experiment.prototype.getDataCollectionById = function(dataCollectionId) {
	var dc = this.json.dataCollections;
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].dataCollectionId == dataCollectionId) {
			return dc[i];
		}
	}
};

/** For a specimen calculates the volume to load adding all the volume to load of all the measurements **/
Experiment.prototype.getVolumeToLoadBySampleId = function(specimenId) {
	var sample = this.getSpecimenById(specimenId);
	if (sample != null) {
		var volumeToLoad = 0;
		for ( var i = 0; i < sample.measurements.length; i++) {
			volumeToLoad = volumeToLoad + Number(sample.measurements[i].volumeToLoad);
		}
		return volumeToLoad;
	}
};


function ExperimentList(experiments){
	this.experiments = experiments;
	
	this.macromoleculeColors = {}; 
	
	for (var i = 0; i < experiments.length; i++) {
		this.macromoleculeColors = $.extend({}, this.macromoleculeColors, experiments[i].macromoleculeColors); 
	}
}

ExperimentList.prototype.getSpecimenColorByBufferId = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var color = experiment.getSpecimenColorByBufferId(bufferId);
		if (color != null){
			return color;
		}
	}
	return 'black';
};

ExperimentList.prototype.getColorByMacromoleculeId = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var color = experiment.getColorByMacromoleculeId(bufferId);
		if (color != null){
			return color;
		}
	}
	return 'black';
};


ExperimentList.prototype.getMeasurements = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			result.push(measurements[j]);
		} 
	} 
	return result;
};

ExperimentList.prototype.getMeasurementByDataCollectionId = function (dataCollectionId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var dataCollection = this.experiments[i].getMeasurementByDataCollectionId(dataCollectionId);
		if (dataCollection.length != 0){
			return dataCollection;
		}
	}
	return [];
};

ExperimentList.prototype.getMergesByMeasurements = function (measurements){
	var merges = [];
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].merge3VOs != null){
			for ( var j = 0; j < measurements[i].merge3VOs.length; j++) {
				merges.push(measurements[i].merge3VOs[j]);
			}
		}
	}
	return merges;
};

ExperimentList.prototype.getSamplePlateById = function (samplePlateId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var samplePlate = this.experiments[i].getSamplePlateById(samplePlateId);
		if (samplePlate != null){
			return samplePlate;
		}
	}
	return null;
};

ExperimentList.prototype.getMergesByDataCollectionId = function (dataCollectionId){
	return this.getMergesByMeasurements(this.getMeasurementByDataCollectionId(dataCollectionId));
};

ExperimentList.prototype.getMerges = function (){
	return this.getMergesByMeasurements(this.getMeasurements());
};

ExperimentList.prototype.getDataCollectionById = function (dataCollectionId){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var dc = experiment.getDataCollectionById(dataCollectionId);
		if (dc != null){
			return dc;
		}
	}
	return result;
};

ExperimentList.prototype.getDataCollectionByMeasurementId = function (measurementId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var result = experiment.getDataCollectionByMeasurementId(measurementId);
		if (result != null){
			return result;
		}
	}
	return null;
};


ExperimentList.prototype.getMeasurementsNotCollected = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			if (measurements[j].run3VO == null){
				result.push(measurements[j]);
			}
		}
	}
	return result;
};

ExperimentList.prototype.getMeasurementsCollected = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			if (measurements[j].run3VO != null){
				result.push(measurements[j]);
			}
		}
	}
	return result;
};

ExperimentList.prototype.getMeasurementById = function (specimenId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var specimen = this.experiments[i].getMeasurementById(specimenId);
		if (specimen != null){
			return specimen;
		}
	}
	return null;
};

ExperimentList.prototype.getBufferById = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var buffer = this.experiments[i].getBufferById(bufferId);
		if (buffer != null){
			return buffer;
		}
	}
	return null;
};

ExperimentList.prototype.getSampleById = function (sampleId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var sample = this.experiments[i].getSampleById(sampleId);
		if (sample != null){
			return sample;
		}
	}
	return null;
};

ExperimentList.prototype.getSamplesByCondition = function (macromoleculeId, bufferId){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var samples = this.experiments[i].getSamples();
		for ( var j = 0; j < samples.length; j++) {
			if (samples[j].macromolecule3VO != null){
				if (samples[j].macromolecule3VO.macromoleculeId == macromoleculeId){
					if (samples[j].bufferId == bufferId){
						result.push(samples[j]);
					}
				}
			}
		}
	}
	return result;
};

ExperimentList.prototype.getFrames = function (mergesList){
	var frames = [];
	for ( var i = 0; i < mergesList.length; i++) {
		var merge = mergesList[i];
		if (merge.framelist3VO != null){
			if (merge.framelist3VO.frametolist3VOs != null){
				for ( var j = 0; j < merge.framelist3VO.frametolist3VOs.length; j++) {
					var frame = merge.framelist3VO.frametolist3VOs[j].frame3VO;
					if (frame!= null){
						frames.push(frame);
					}
				}
			}
		}
	}
	return frames;
};

function ExperimentSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

ExperimentSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
ExperimentSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
ExperimentSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ExperimentSaxsDataAdapter.prototype.getByExperimentByKey= function(key, value){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/{1}/list'.format( [key.toString(), value.toString()]));
};

ExperimentSaxsDataAdapter.prototype.getExperiments= function(){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/list');
};

ExperimentSaxsDataAdapter.prototype.getExperimentById= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/get'.format( [experimentId]));
};

ExperimentSaxsDataAdapter.prototype.getExperimentsBySessionId= function(sessionId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/session/{0}/list'.format( [ sessionId]));
};

ExperimentSaxsDataAdapter.prototype.getByExperimentId= function(experimentIds){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/experimentId/{0}/list'.format( [ experimentIds]));
};

ExperimentSaxsDataAdapter.prototype.saveExperiment = function(experimentId, name, comments ){
    var url = ('/{token}/proposal/{proposal}/saxs/experiment/{0}/save'.format([experimentId]));
	this.post(url, {
						name : name,
						comments : comments
	});
};
function FrameSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

FrameSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
FrameSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
FrameSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

FrameSaxsDataAdapter.prototype.getFramesByAverageId= function(averageId){
	this.get('/{token}/proposal/{proposal}/saxs/frame/average/{0}/bean'.format( [averageId.toString()]));
};

FrameSaxsDataAdapter.prototype.downloadFramesByAverageIdList= function(averageIdList){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/frame/{0}/zip'.format( [averageIdList.toString()]));
};

FrameSaxsDataAdapter.prototype.getFramesURL = function(frames, averages, subtractions,sampleaverages, bufferaverages, models, operation){
	if (frames == null){
		frames = [];
	}
	if (averages == null){
		averages = [];
	}
	if (subtractions == null){
		subtractions = [];
	}
	if (sampleaverages == null){
		sampleaverages = [];
	}
	if (bufferaverages == null){
		bufferaverages = [];
	}
	
	if (models == null){
		models = [];
	}

	if (operation == null){
		operation = "LOG";
	}
	
	var connection = EXI.credentialManager.getConnections()[0];
	return connection.url + ('/{0}/proposal/{1}/saxs/frame/datplot?frame={2}&average={3}&subtracted={4}&sampleaverage={5}&bufferaverage={6}&models={7}&operation={8}'.format([ connection.token,connection.user, frames.toString(), averages.toString(),subtractions.toString(), sampleaverages.toString(), bufferaverages.toString(), models.toString(), operation ]));
};

function HPLCSaxsDataAdapter(args){
	 DataAdapter.call(this, args);
}

HPLCSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
HPLCSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
HPLCSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

HPLCSaxsDataAdapter.prototype.getHPLCOverviewByExperimentId= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/overview'.format( [experimentId]));
};

HPLCSaxsDataAdapter.prototype.getHPLCFramesScatteringURL= function(experimentId, frameIdList){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/frame/{1}/get?operation=log'.format( [experimentId, frameIdList.toString()]));
};

HPLCSaxsDataAdapter.prototype.getDownloadHDF5URL= function(experimentId){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/download'.format( [experimentId]));
};

HPLCSaxsDataAdapter.prototype.getDownloadHDF5FramesURL= function(experimentId, start, end){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/frame/{1}/{2}/zip'.format( [experimentId,start,end]));
};

function MacromoleculeSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

MacromoleculeSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
MacromoleculeSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
MacromoleculeSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

MacromoleculeSaxsDataAdapter.prototype.saveMacromolecule = function(macromolecule){
    	var url = ('/{token}/proposal/{proposal}/saxs/macromolecule/save');
	this.post(url, {macromolecule : JSON.stringify(macromolecule)});
};

MacromoleculeSaxsDataAdapter.prototype.getMacromolecules= function(){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/list');
};


MacromoleculeSaxsDataAdapter.prototype.getContactDescriptionUploadFileURL= function(macromoleculeId){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/upload'.format([macromoleculeId]));
};

MacromoleculeSaxsDataAdapter.prototype.removeContactDescriptionFile= function(macromoleculeId){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/remove'.format([macromoleculeId]));
};


MacromoleculeSaxsDataAdapter.prototype.getAddPDBURL= function(macromoleculeId){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/upload'.format([macromoleculeId]));
};

MacromoleculeSaxsDataAdapter.prototype.removeStructure= function(macromoleculeId, structureId){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/remove'.format([macromoleculeId, structureId]));
};

MacromoleculeSaxsDataAdapter.prototype.saveStructure= function(macromoleculeId, structureId,  multiplicity, symmetry){
	var url = ('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/save'.format([macromoleculeId, structureId]));
	this.post(url, {
						symmetry : symmetry,
						multiplicity : multiplicity
	});
		
};

function MeasurementSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

MeasurementSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
MeasurementSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
MeasurementSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

MeasurementSaxsDataAdapter.prototype.saveMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/save');
	this.post(url, {measurement : JSON.stringify(measurement)});
};

MeasurementSaxsDataAdapter.prototype.removeMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/{0}/remove'.format([measurement.measurementId]));
	this.get(url);
};

MeasurementSaxsDataAdapter.prototype.sortMeasurements= function(experimentId, type){
    this.get('/{token}/proposal/{proposal}/saxs/measurement/experiment/{0}/type/{1}/sort'.format( [experimentId, type]));
};
function ModelSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

ModelSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
ModelSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
ModelSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ModelSaxsDataAdapter.prototype.saveMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/save');
    this.post(url, {measurement : JSON.stringify(measurement)});
};

ModelSaxsDataAdapter.prototype.removeMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/{0}/remove'.format([measurement.measurementId]));
    this.get(url);
};

ModelSaxsDataAdapter.prototype.getPDB= function(models, superpositions){
    var url = ('/{token}/proposal/{proposal}/saxs/modeling/pdb/get');
    this.post(url, {models : JSON.stringify(models)});

};
function SaxsDataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
	this.mx = new MxDataAdapterGroup(args);
	this.saxs = new SaxsDataAdapterGroup(args);
	this.exi = new ExiDataAdapterGroup(args);
}















































function SaxsDataAdapterGroup(args){
	this.experiment = new ExperimentSaxsDataAdapter(args);
	this.buffer = new BufferSaxsDataAdapter(args);
	this.macromolecule= new MacromoleculeSaxsDataAdapter(args);
	this.hplc = new HPLCSaxsDataAdapter(args);
	this.measurement = new MeasurementSaxsDataAdapter(args);
	this.specimen = new SpecimenSaxsDataAdapter(args);
	this.stockSolution = new StockSolutionSaxsDataAdapter(args);
	this.subtraction = new SubtractionSaxsDataAdapter(args);
	this.dataCollection = new DataCollectionSaxsDataAdapter(args);
	this.template = new TemplateSaxsDataAdapter(args);
	this.frame = new FrameSaxsDataAdapter(args);
	this.model = new ModelSaxsDataAdapter(args);
}



function SpecimenSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

SpecimenSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
SpecimenSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
SpecimenSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SpecimenSaxsDataAdapter.prototype.saveSpecimen= function(specimen){
    var url = ('/{token}/proposal/{proposal}/saxs/specimen/save');
	this.post(url, {specimen : JSON.stringify(specimen)});
};

SpecimenSaxsDataAdapter.prototype.mergeSpecimens= function(sourceSpecimenId, targetSpecimenId){
    var url = ('/{token}/proposal/{proposal}/saxs/specimen/merge');
	this.post(url, {sourceSpecimenId : sourceSpecimenId, targetSpecimenId : targetSpecimenId });
};
function StockSolutionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

StockSolutionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
StockSolutionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
StockSolutionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

StockSolutionSaxsDataAdapter.prototype.getStockSolutions= function(){
	this.get('/{token}/proposal/{proposal}/saxs/stocksolution/list');
};

StockSolutionSaxsDataAdapter.prototype.saveStockSolution= function(stocksolution){
    var url = ('/{token}/proposal/{proposal}/saxs/stocksolution/save');
	this.post(url, {stocksolution : JSON.stringify(stocksolution)});
};
function SubtractionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

SubtractionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
SubtractionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
SubtractionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SubtractionSaxsDataAdapter.prototype.getSubtractionsBySubtractionIdList= function(subtractionIdList){
	this.get('/{token}/proposal/{proposal}/saxs/subtraction/{0}/list'.format( [subtractionIdList.toString()]));
};

SubtractionSaxsDataAdapter.prototype.getImage = function(subtractionId, imageType){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/subtraction/{0}/image/{1}'.format([ subtractionId, imageType]));
};

SubtractionSaxsDataAdapter.prototype.getZip = function(subtractionId){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/subtraction/{0}/zip'.format([ subtractionId]));
};

function TemplateSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

TemplateSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
TemplateSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
TemplateSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


TemplateSaxsDataAdapter.prototype.getTemplateSourceFile = function(experimentId, type){
	return this.getUrl('/{token}/proposal/{proposal}/saxs/experiment/{0}/samplechanger/type/{1}/template'.format([  experimentId, type]));
};


TemplateSaxsDataAdapter.prototype.saveTemplate = function(name, comments, measurements, experimentId ){
    var url = ('/{token}/proposal/{proposal}/saxs/experiment/save');
	this.post(url, {name : name,
					comments : comments,
					experimentId : experimentId,
					measurements : measurements.toString()
	});
};


function AuthenticationDataAdapter(args){
	DataAdapter.call(this, args);
}

AuthenticationDataAdapter.prototype.get = DataAdapter.prototype.get;
AuthenticationDataAdapter.prototype.post = DataAdapter.prototype.post;
AuthenticationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


AuthenticationDataAdapter.prototype.authenticate = function(user, password, url){
	var _this = this;
	
	var site = "ESRF";
	/** SITE **/
	if (url.indexOf("embl-hamburg") != -1){
		site = "EMBL";
	}
	if (url.indexOf("192.109.31.39") != -1){
		site = "EMBL";
	}
	this.post('/authenticate?site=' + site, 
					{
			  			login : user,
			  			password : password
					}
	);
};
